1. What is the name of the feature responsible for generating Regex objects?
Ans =  The re. compile() function
2. Why do raw strings often appear in Regex objects?
Ans = Raw strings are used so that backslashes do not have to be escaped
3. What is the return value of the search() method?
Ans =  a numeric value
If the search method does not find a match it will return #value
4. From a Match item, how do you get the actual strings that match the pattern?
Ans =The group() method returns strings of the matched text.
5. In the regex which created from the r'(\d\d\d)-(\d\d\d-\d\d\d\d)', what does group zero cover? Group 2? Group 1?
6. In standard expression syntax, parentheses and intervals have distinct meanings. How can you tell a regex that you want it to fit real parentheses and periods?
Ans = Regular expressions are specially encoded text strings used as patterns .The parentheses must be balanced, too; in other words, you can't just have one
7. The findall() method returns a string list or a list of string tuples. What causes it to return one of the two options?
Ans =If the regex has no groups, a list of strings is returned. If the regex has groups, a list of tuples of strings is returned.
8. In standard expressions, what does the | character mean?
Ans = a regular character that has a literal meaning
9. In regular expressions, what does the character stand for?
Ans = at may qualify for a match in a search. A character set is indicated by enclosing a set of characters in brackets ([ and ]). For instance, the character set [abz] will match any of the characters a, b, or z, or a combination of these such as ab, za, or baz
10.In regular expressions, what is the difference between the + and * characters?
Ans =the star quantifier( * ) means that the preceding expression can match zero or more times it is like {0,} while the plus quantifier( + ) indicate that the preceding expression MUST match at least one time or multiple times and it is the same as {1,}
11. What is the difference between {4} and {4,5} in regular expression?
12. What do you mean by the \d, \w, and \s shorthand character classes signify in regular expressions?
Ans =The \d, \w, and \s shorthand character classes match a single digit, word, or space character, respectively.
13. What do means by \D, \W, and \S shorthand character classes signify in regular expressions?
Ans =he \d, \w, and \s shorthand character classes match a single digit, word, or space character, respectively.
14. What is the difference between .*? and .*?
Ans = The ? as a repetition quantifier changes this behavior into non-greedy, also called reluctant and sometimes "lazy". In contrast, this repetition will first try to match as few reps as possible, and when this doesn't work and they have to backtrack, they start matching one more rept a time. As a result, when a match finally happens, a reluctant repetition would match as few reps as possible.
15. What is the syntax for matching both numbers and lowercase letters with a character class?
Ans = [. -.] (Range Expression): Accept ANY ONE of the character in the range, e.g., [0-9] matches any digit; [A-Za-z] matches any uppercase or lowercase letters.

16. What is the procedure for making a normal expression in regax case insensitive?
Ans = Using CASE_INSENSITIVE flag.
Using modifier.

17. What does the . character normally match? What does it match if re.DOTALL is passed as 2nd argument in re.compile()?
Ans =character normally matches any character except the newline character. If re. DOTALL is passed as the second argument to re. compile(), then the dot will also match newline characters.
18. If numReg = re.compile(r'\d+'), what will numRegex.sub('X', '11 drummers, 10 pipers, five rings, 4 hen') return?
19. What does passing re.VERBOSE as the 2nd argument to re.compile() allow to do?
Ans =VERBOSE as the second argument to re. compile() allow you to do? The re. VERBOSE argument allows you to add whitespace and comments to the string passed to re.

20. How would you write a regex that match a number with comma for every three digits? It must match the given following:
'42'
'1,234'
'6,368,745'
but not the following:
'12,34,567' (which has only two digits between the commas)
'1234' (which lacks commas)
An s= import re
pattern =r"[1-9][0-9]{0,2}(?:,\d{3})?(?:,\d{3})?"
string = '42 1,234 6,368,745 12,34,567 1234'
a = re.findall(pattern,string)
print(a)

21. How would you write a regex that matches the full name of someone whose last name is Watanabe? You can assume that the first name that comes before it will always be one word that begins with a capital letter. The regex must match the following:
'Haruto Watanabe'
'Alice Watanabe'
'RoboCop Watanabe'
but not the following:
'haruto Watanabe' (where the first name is not capitalized)
'Mr. Watanabe' (where the preceding word has a nonletter character)
'Watanabe' (which has no first name)
'Haruto watanabe' (where Watanabe is not capitalized)
Ans =i mport re
 
print("\n\n\t*************\n\nThis is the result I get using my regex with search in text:")
mo0 = name_regex.search(text)
found = mo0.group()
print(found + '\n\n')
 
mo1 = name_regex.search('Haruto Watanabe')
mo2 = name_regex.search('Alice Watanabe')
mo3 = name_regex.search('RoboCop Watanabe')
mo4 = name_regex.search('Watanabe')
mo5 = name_regex.search('Mr. Watanabe')
mo6 = name_regex.search('Haruto watanabe')
mo7 = name_regex.search('haruto watanabe')
 
mo_l = [mo1, mo2, mo3, mo4, mo5, mo6, mo7]
 
print("Next, the result of using my regex with search over each possible name to match:")
try:
    for mo_x in mo_l:
        mo = mo_x.group()
        print(mo)
except AttributeError:
    pass
 
print("\n\nFinally, the result of using the same regex with findall (same text as in first search):")
 
all_matches = re.findall(name_regex, text)
 
for match in all_matches:
    print(match)
 
print('\n\nThank you Ryan for teaching me!')

22. How would you write a regex that matches a sentence where the first word is either Alice, Bob, or Carol; the second word is either eats, pets, or throws; the third word is apples, cats, or baseballs; and the sentence ends with a period? This regex should be case-insensitive. It must match the following:
'Alice eats apples.'
'Bob pets cats.'
'Carol throws baseballs.'
'Alice throws Apples.'
'BOB EATS CATS.'
but not the following:
'RoboCop eats apples.'
'ALICE THROWS FOOTBALLS.'
'Carol eats 7 cats.'
Ans = regex=re.compile(r'Alice|Bob|Carol\seats|pets|throws\sapples\.|cats\.|baseballs\.',re.IGNORECASE)
mo=regex.search(str)
ma=mo.group()


